// <auto-generated />
using CircuitManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CircuitManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("CircuitElementComponent", b =>
                {
                    b.Property<int>("CircuitElementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComponentListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CircuitElementsId", "ComponentListId");

                    b.HasIndex("ComponentListId");

                    b.ToTable("CircuitElementComponents", (string)null);
                });

            modelBuilder.Entity("CircuitManager.Models.CircuitElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NextCircuitElementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NextCircuitElementId");

                    b.ToTable("CircuitElements", (string)null);
                });

            modelBuilder.Entity("CircuitManager.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Components", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direction = 1,
                            Label = "N",
                            Name = "Napęd"
                        },
                        new
                        {
                            Id = 2,
                            Direction = 0,
                            Label = "P",
                            Name = "Przycisk"
                        },
                        new
                        {
                            Id = 3,
                            Direction = 1,
                            Label = "S",
                            Name = "Stycznik"
                        },
                        new
                        {
                            Id = 4,
                            Direction = 0,
                            Label = "C",
                            Name = "Czujnik"
                        },
                        new
                        {
                            Id = 5,
                            Direction = 1,
                            Label = "R",
                            Name = "Przenośnik"
                        },
                        new
                        {
                            Id = 6,
                            Direction = 0,
                            Label = "K",
                            Name = "Korek"
                        });
                });

            modelBuilder.Entity("CircuitManager.Models.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MachineTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "TP",
                            Name = "Transporter Palet"
                        },
                        new
                        {
                            Id = 2,
                            Label = "TO",
                            Name = "Obrotnica"
                        },
                        new
                        {
                            Id = 3,
                            Label = "MP",
                            Name = "Magazyn Palet"
                        });
                });

            modelBuilder.Entity("CircuitElementComponent", b =>
                {
                    b.HasOne("CircuitManager.Models.CircuitElement", null)
                        .WithMany()
                        .HasForeignKey("CircuitElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CircuitManager.Models.Component", null)
                        .WithMany()
                        .HasForeignKey("ComponentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CircuitManager.Models.CircuitElement", b =>
                {
                    b.HasOne("CircuitManager.Models.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CircuitManager.Models.CircuitElement", "NextCircuitElement")
                        .WithMany()
                        .HasForeignKey("NextCircuitElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MachineType");

                    b.Navigation("NextCircuitElement");
                });
#pragma warning restore 612, 618
        }
    }
}
